name: Deploy Application

on:
  push:
              echo "needs_setup=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Setup complete: ECR repository exists in AWS"
            
            # Verificar se vari√°veis necess√°rias est√£o definidas
            if [ -z "${{ vars.APP_NAME }}" ]; then
              echo "üîß Setting APP_NAME variable..."
              gh variable set APP_NAME --body "${{ vars.ECR_REPOSITORY }}"
            fi
            
            if [ -z "${{ vars.ECR_REGISTRY }}" ]; then
              echo "üîß Setting ECR_REGISTRY variable..."
              gh variable set ECR_REGISTRY --body "124213954422.dkr.ecr.us-east-1.amazonaws.com"
            fibranches:
      - main
      - development
      
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  setup-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    outputs:
      needs_setup: ${{ steps.check.outputs.needs_setup }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Check if setup is needed
        id: check
        env:
          GH_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
        run: |
          if [ -z "${{ vars.ECR_REPOSITORY }}" ]; then
            echo "needs_setup=true" >> $GITHUB_OUTPUT
            echo "üîß Setup needed: ECR_REPOSITORY variable not found"
          else
            echo "üîç ECR_REPOSITORY variable exists: ${{ vars.ECR_REPOSITORY }}"
            echo "üîç Checking if ECR repository exists in AWS..."
            
            # Check if ECR repository actually exists
            if aws ecr describe-repositories --repository-names "${{ vars.ECR_REPOSITORY }}" --region us-east-1 >/dev/null 2>&1; then
              echo "needs_setup=false" >> $GITHUB_OUTPUT
              echo "‚úÖ Setup complete: ECR repository exists in AWS"
            else
              echo "needs_setup=true" >> $GITHUB_OUTPUT
              echo "‚ùå Setup needed: ECR repository '${{ vars.ECR_REPOSITORY }}' does not exist in AWS"
              echo "üõ†Ô∏è  Please create the ECR repository manually: aws ecr create-repository --repository-name ${{ vars.ECR_REPOSITORY }} --region us-east-1"
              exit 1
            fi
          fi

  deploy:
    needs: [setup-check]
    if: needs.setup-check.outputs.needs_setup == 'false'
    uses: LinkedFarma/workflows/.github/workflows/argo-cd.yml@master
    with:
      environment: dev
    secrets: inherit

  create-argocd-app:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Create ArgoCD Application
        env:
          ARGOCD_SERVER: ${{ vars.ARGOCD_SERVER || 'argocd.gruppy.com.br' }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME || 'admin' }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APP_NAME: ${{ vars.APP_NAME }}
          ENVIRONMENT: dev
        run: |
          echo "üöÄ Creating ArgoCD application: $APP_NAME-$ENVIRONMENT"
          
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          
          # Login to ArgoCD using token or username/password
          if [ -n "$ARGOCD_TOKEN" ]; then
            echo "üîê Authenticating with ArgoCD using token..."
            argocd login $ARGOCD_SERVER --auth-token $ARGOCD_TOKEN --insecure --grpc-web
          elif [ -n "$ARGOCD_PASSWORD" ]; then
            echo "üîê Authenticating with ArgoCD using username/password..."
            argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web
          else
            echo "‚ùå No ArgoCD authentication method provided"
            echo "Please set either ARGOCD_TOKEN or ARGOCD_PASSWORD secret"
            exit 1
          fi
          
          # Configure repository in ArgoCD if not already configured
          echo "üîß Configuring repository access in ArgoCD..."
          if ! argocd repo get https://github.com/LinkedFarma/infra --grpc-web >/dev/null 2>&1; then
            echo "üìÇ Adding repository to ArgoCD..."
            argocd repo add https://github.com/LinkedFarma/infra \
              --username LinkedFarma \
              --password $GITHUB_TOKEN \
              --grpc-web
          else
            echo "‚úÖ Repository already configured in ArgoCD"
          fi
          
          # Check if application already exists
          if argocd app get $APP_NAME-$ENVIRONMENT --grpc-web >/dev/null 2>&1; then
            echo "‚úÖ Application $APP_NAME-$ENVIRONMENT already exists, syncing..."
            argocd app sync $APP_NAME-$ENVIRONMENT --grpc-web
          else
            echo "üÜï Creating new ArgoCD application: $APP_NAME-$ENVIRONMENT"
            argocd app create $APP_NAME-$ENVIRONMENT \
              --repo git@github.com:LinkedFarma/infra.git \
              --path kubernetes/$APP_NAME/$ENVIRONMENT \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace $APP_NAME-$ENVIRONMENT \
              --sync-policy automated \
              --sync-option CreateNamespace=true \
              --auto-prune \
              --self-heal \
              --grpc-web
            
            echo "‚è≥ Waiting for application to be ready..."
            sleep 10
            
            echo "üîÑ Syncing application..."
            argocd app sync $APP_NAME-$ENVIRONMENT --grpc-web || echo "‚ö†Ô∏è Sync may already be in progress"
          fi
          
          echo "‚úÖ ArgoCD application $APP_NAME-$ENVIRONMENT is ready!"
