name: Deploy Application

on:
  push:
    branches:
      - main
      - development
      
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    outputs:
      app_name: ${{ steps.setup_vars.outputs.app_name }}
      ecr_repository: ${{ steps.setup_vars.outputs.ecr_repository }}
      ecr_registry: ${{ steps.setup_vars.outputs.ecr_registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup repository variables
        id: setup_vars
        env:
          GH_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
        run: |
          REPO_NAME="${{ github.repository }}"
          APP_NAME="${REPO_NAME##*/}"
          
          echo "Setting up for: $APP_NAME"
          
          # FIRST: Create ECR repository if it doesn't exist - THIS MUST WORK
          echo "🔍 Checking ECR repository: $APP_NAME"
          if ! aws ecr describe-repositories --repository-names "$APP_NAME" --region us-east-1 > /dev/null 2>&1; then
            echo "🚀 Creating ECR repository: $APP_NAME"
            aws ecr create-repository --repository-name "$APP_NAME" --region us-east-1
            if [ $? -eq 0 ]; then
              echo "✅ ECR repository created successfully: $APP_NAME"
            else
              echo "❌ FAILED to create ECR repository: $APP_NAME"
              exit 1
            fi
          else
            echo "✅ ECR repository already exists: $APP_NAME"
          fi
          
          # Now set variables
          if ! gh variable list | grep -q "ECR_REPOSITORY"; then
            gh variable set ECR_REPOSITORY --body "$APP_NAME"
            echo "✅ Created ECR_REPOSITORY variable: $APP_NAME"
          fi
          
          if ! gh variable list | grep -q "APP_NAME"; then
            gh variable set APP_NAME --body "$APP_NAME"
            echo "✅ Created APP_NAME variable: $APP_NAME"
          fi
          
          if ! gh variable list | grep -q "ECR_REGISTRY"; then
            gh variable set ECR_REGISTRY --body "124213954422.dkr.ecr.us-east-1.amazonaws.com"
            echo "✅ Created ECR_REGISTRY variable"
          fi
          
          if ! gh variable list | grep -q "ARGOCD_SERVER"; then
            gh variable set ARGOCD_SERVER --body "argocd.gruppy.com.br"
            echo "✅ Created ARGOCD_SERVER variable"
          fi
          
          # Set PREFIX_DOMAIN for external services
          {% if values.serviceType == 'external' and values.prefixDomain %}
          if ! gh variable list | grep -q "PREFIX_DOMAIN"; then
            gh variable set PREFIX_DOMAIN --body "{{ values.prefixDomain }}"
            echo "✅ Created PREFIX_DOMAIN variable: {{ values.prefixDomain }}"
          fi
          {% endif %}
          
          if ! gh secret list | grep -q "ARGOCD_USERNAME"; then
            gh secret set ARGOCD_USERNAME --body "admin"
            echo "✅ Created ARGOCD_USERNAME secret"
          fi
          
          if ! gh secret list | grep -q "ARGOCD_PASSWORD"; then
            gh secret set ARGOCD_PASSWORD --body "oRXz0NXyU1N5gCDd"
            echo "✅ Created ARGOCD_PASSWORD secret"
          fi
          
          # Output values
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "ecr_repository=$APP_NAME" >> $GITHUB_OUTPUT  
          echo "ecr_registry=124213954422.dkr.ecr.us-east-1.amazonaws.com" >> $GITHUB_OUTPUT
          
          echo "🎉 SETUP COMPLETE - ECR: $APP_NAME is ready!"

  deploy:
    needs: [setup]
    uses: LinkedFarma/workflows/.github/workflows/argo-cd.yml@master
    with:
      environment: dev
    secrets: inherit

  create-argocd-app:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Create ArgoCD Application
        env:
          ARGOCD_SERVER: ${{ vars.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
          APP_NAME: ${{ vars.APP_NAME }}
          DEFAULT_ARGOCD_SERVER: argocd.gruppy.com.br
          DEFAULT_ARGOCD_USERNAME: admin
          DEFAULT_ARGOCD_PASSWORD: oRXz0NXyU1N5gCDd
          ENVIRONMENT: dev
        run: |
          # Set default values if not provided
          ARGOCD_SERVER=${ARGOCD_SERVER:-$DEFAULT_ARGOCD_SERVER}
          ARGOCD_USERNAME=${ARGOCD_USERNAME:-$DEFAULT_ARGOCD_USERNAME}
          ARGOCD_PASSWORD=${ARGOCD_PASSWORD:-$DEFAULT_ARGOCD_PASSWORD}
          APP_NAME=${APP_NAME:-${{ github.event.repository.name }}}
          
          echo "Creating ArgoCD application: $APP_NAME-$ENVIRONMENT"
          
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          
          # Login to ArgoCD
          echo "Authenticating with ArgoCD using username/password..."
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web
          
          # Check if application already exists
          if argocd app get $APP_NAME-$ENVIRONMENT --grpc-web > /dev/null 2>&1; then
            echo "Application $APP_NAME-$ENVIRONMENT already exists, syncing..."
            argocd app sync $APP_NAME-$ENVIRONMENT --grpc-web
          else
            echo "Creating new ArgoCD application: $APP_NAME-$ENVIRONMENT"
            argocd app create $APP_NAME-$ENVIRONMENT \
              --repo git@github.com:LinkedFarma/infra.git \
              --path kubernetes/$APP_NAME/$ENVIRONMENT \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace $APP_NAME-$ENVIRONMENT \
              --sync-policy automated \
              --sync-option CreateNamespace=true \
              --auto-prune \
              --self-heal \
              --grpc-web
            
            echo "Waiting for application to be ready..."
            sleep 10
            
            echo "Syncing application..."
            if ! argocd app sync $APP_NAME-$ENVIRONMENT --grpc-web; then
              echo "Sync may already be in progress"
            fi
          fi
          
          echo "ArgoCD application $APP_NAME-$ENVIRONMENT is ready!"
