name: Deploy Application

on:
  push:
    branches:
      - main
      - development
      
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup repository variables
        env:
          GH_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
        run: |
          REPO_NAME="${{ github.repository }}"
          APP_NAME="${REPO_NAME##*/}"
          
          echo "Setting up variables for: $APP_NAME"
          
          # Set all required variables
          gh variable set ECR_REPOSITORY --body "$APP_NAME" || echo "ECR_REPOSITORY already exists"
          gh variable set APP_NAME --body "$APP_NAME" || echo "APP_NAME already exists"
          gh variable set ECR_REGISTRY --body "124213954422.dkr.ecr.us-east-1.amazonaws.com" || echo "ECR_REGISTRY already exists"
          gh variable set ARGOCD_SERVER --body "argocd.gruppy.com.br" || echo "ARGOCD_SERVER already exists"
          
          # Set ArgoCD secrets
          gh secret set ARGOCD_USERNAME --body "admin" || echo "ARGOCD_USERNAME already exists"
          gh secret set ARGOCD_PASSWORD --body "oRXz0NXyU1N5gCDd" || echo "ARGOCD_PASSWORD already exists"
          
          echo "Variables setup complete!"
          
          # Create ECR repository if it doesn't exist
          echo "Checking ECR repository..."
          if ! aws ecr describe-repositories --repository-names "$APP_NAME" --region us-east-1 > /dev/null 2>&1; then
            echo "Creating ECR repository: $APP_NAME"
            aws ecr create-repository --repository-name "$APP_NAME" --region us-east-1 || echo "ECR creation failed - may need manual creation"
          else
            echo "ECR repository already exists: $APP_NAME"
          fi

  deploy:
    needs: [setup]
    uses: LinkedFarma/workflows/.github/workflows/argo-cd.yml@master
    with:
      environment: dev
    secrets: inherit

  create-argocd-app:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Create ArgoCD Application
        env:
          ARGOCD_SERVER: ${{ vars.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
          APP_NAME: ${{ vars.APP_NAME }}
          ENVIRONMENT: dev
        run: |
          # Set default values if not provided
          ARGOCD_SERVER=${ARGOCD_SERVER:-argocd.gruppy.com.br}
          ARGOCD_USERNAME=${ARGOCD_USERNAME:-admin}
          
          echo "Creating ArgoCD application: $APP_NAME-$ENVIRONMENT"
          
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          
          # Login to ArgoCD
          echo "Authenticating with ArgoCD using username/password..."
          argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web
          
          # Check if application already exists
          if argocd app get $APP_NAME-$ENVIRONMENT --grpc-web > /dev/null 2>&1; then
            echo "Application $APP_NAME-$ENVIRONMENT already exists, syncing..."
            argocd app sync $APP_NAME-$ENVIRONMENT --grpc-web
          else
            echo "Creating new ArgoCD application: $APP_NAME-$ENVIRONMENT"
            argocd app create $APP_NAME-$ENVIRONMENT \
              --repo git@github.com:LinkedFarma/infra.git \
              --path kubernetes/$APP_NAME/$ENVIRONMENT \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace $APP_NAME-$ENVIRONMENT \
              --sync-policy automated \
              --sync-option CreateNamespace=true \
              --auto-prune \
              --self-heal \
              --grpc-web
            
            echo "Waiting for application to be ready..."
            sleep 10
            
            echo "Syncing application..."
            argocd app sync $APP_NAME-$ENVIRONMENT --grpc-web || echo "Sync may already be in progress"
          fi
          
          echo "ArgoCD application $APP_NAME-$ENVIRONMENT is ready!"
