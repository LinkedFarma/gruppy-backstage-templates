name: Setup CI/CD Automatically
on:
  workflow_dispatch:
    inputs:
      setup_required:
        description: 'Run setup (first time only)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  setup:
    runs-on: ubuntu-latest
    if: github.event.inputs.setup_required == 'true'
    permissions:
      contents: write
      actions: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fix package.json name
        run: |
          # Replace template variables in package.json with actual repository name
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME##*/}"  # Get just the repo name part
          if [ -f nodejs-microservice/package.json ]; then
            perl -i -pe "s/\\\$\{\{\s*values\.name\s*\}\}/$REPO_NAME/g" nodejs-microservice/package.json
            perl -i -pe "s/\\\$\{\{\s*values\.description\s*\}\}/Generated microservice for $REPO_NAME/g" nodejs-microservice/package.json
            echo "Updated package.json with repository name: $REPO_NAME"
          fi

      - name: Extract service name from package.json
        id: extract-name
        run: |
          # Try to get name from package.json, fallback to repository name
          if [ -f nodejs-microservice/package.json ]; then
            SERVICE_NAME=$(cat nodejs-microservice/package.json | jq -r '.name // empty')
          fi
          
          # If still empty, use repository name
          if [ -z "$SERVICE_NAME" ] || [ "$SERVICE_NAME" = "null" ]; then
            SERVICE_NAME="${{ github.repository }}"
            SERVICE_NAME="${SERVICE_NAME##*/}"  # Get just the repo name part
          fi
          
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "Using service name: $SERVICE_NAME"

      - name: Extract PREFIX_DOMAIN from catalog-info.yaml
        id: extract-domain
        run: |
          # Extract PREFIX_DOMAIN from catalog-info.yaml
          if [ -f catalog-info.yaml ]; then
            # Look for the prefixDomain value in the servers section
            PREFIX_DOMAIN=$(grep -o 'https://[^.]*\.linkedfarma\.com\.br' catalog-info.yaml | head -1 | sed 's|https://||' | sed 's|\.linkedfarma\.com\.br||')
            
            # If not found, try to extract from template variables
            if [ -z "$PREFIX_DOMAIN" ]; then
              # Look for template prefixDomain variable pattern and use service name as fallback
              PREFIX_DOMAIN="${{ steps.extract-name.outputs.service_name }}"
            fi
          else
            # Fallback to service name if catalog-info.yaml doesn't exist
            PREFIX_DOMAIN="${{ steps.extract-name.outputs.service_name }}"
          fi
          
          echo "prefix_domain=$PREFIX_DOMAIN" >> $GITHUB_OUTPUT
          echo "Using PREFIX_DOMAIN: $PREFIX_DOMAIN"
          
      - name: Create ECR repository if not exists teste
        run: |
          aws ecr create-repository --repository-name $REPO_NAME --region us-east-1 || echo "Repository already exists"
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REPO_NAME: ${{ steps.extract-name.outputs.service_name }}
          
      - name: Set GitHub Variables
        env:
          GH_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
        run: |
          echo "Testing token permissions first..."
          curl -s -H "Authorization: token $GH_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}
          
          echo "Creating variables with direct API calls..."
          
          # Create variables using GitHub API directly
          curl -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables \
            -d "{\"name\":\"ECR_REPOSITORY\",\"value\":\"${{ steps.extract-name.outputs.service_name }}\"}" || echo "Variable may already exist"
          
          curl -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables \
            -d "{\"name\":\"APP_NAME\",\"value\":\"${{ steps.extract-name.outputs.service_name }}\"}" || echo "Variable may already exist"
          
          curl -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables \
          
          curl -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables \
          
          # NOVO: Criar variável PREFIX_DOMAIN
          curl -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables \
            -d "{\"name\":\"PREFIX_DOMAIN\",\"value\":\"${{ steps.extract-domain.outputs.prefix_domain }}\"}" || echo "Variable may already exist"
          
      - name: Setup Complete
        run: |
          echo "✅ CI/CD Setup Complete!"
          echo "- ECR Repository: ${{ steps.extract-name.outputs.service_name }}"
          echo "- PREFIX_DOMAIN: ${{ steps.extract-domain.outputs.prefix_domain }}"
          echo "- GitHub Variables: Configured automatically"
          echo "- AWS Region: us-east-1"
          echo "- Ready for automatic deployments!"

  info:
    runs-on: ubuntu-latest
    if: github.event.inputs.setup_required != 'true'
    steps:
      - name: Setup Info
        run: |
          echo "ℹ️  Setup already completed"
          echo "CI/CD is ready for deployments"
