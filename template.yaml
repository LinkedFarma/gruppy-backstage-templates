apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: gruppy-nodejs-microservice
  title: Gruppy Node.js Microservice Template
  description: Creates a Node.js microservice with complete CI/CD pipeline
  tags:
    - nodejs
    - express
    - microservice
    - gruppy
spec:
  owner: gruppy-platform-team
  type: service
  parameters:
    - title: Service Information
      required:
        - name
        - description
      properties:
        name:
          title: Service Name
          type: string
          pattern: '^[a-z0-9-]+$'
          description: Nome do microserviço (apenas letras minúsculas, números e hífens)
        description:
          title: Description
          type: string
          description: Breve descrição do que o serviço faz
    - title: Service Configuration
      required:
        - serviceType
      properties:
        serviceType:
          title: Service Type
          type: string
          description: Tipo de exposição do serviço
          enum:
            - external
            - internal
          enumNames:
            - 'External (acessível via web)'
            - 'Internal (apenas dentro do cluster)'
          default: external
        prefixDomain:
          title: Prefix Domain (apenas para external)
          type: string
          description: Prefixo do domínio para serviços externos (ex. api, admin, app)
          pattern: '^[a-z0-9-]+$'
          ui:help: 'Será usado como: prefixo.gruppy.com.br - deixe vazio para serviços internos'
        
    - title: Repository Configuration
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: fetch-base
      name: Fetch Base Template
      action: fetch:template
      input:
        url: ./nodejs-microservice
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          serviceType: ${{ parameters.serviceType }}
          prefixDomain: ${{ parameters.prefixDomain | default('') }}
          
    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        repoUrl: ${{ parameters.repoUrl }}
        description: ${{ parameters.description }}

    - id: create-development-branch
      name: Create Development Branch
      action: github:createRef
      input:
        repoUrl: ${{ parameters.repoUrl }}
        ref: refs/heads/development
        sha: ${{ steps.publish.output.commitHash }}

    - id: setup-variables
      name: Setup Repository Variables
      action: github:actions:dispatch
      input:
        repoUrl: ${{ parameters.repoUrl }}
        workflowId: .github/workflows/setup-variables.yml
        branchOrTagName: main
        workflowInputs:
          project_name: ${{ parameters.name }}

    - id: setup-ci-cd
      name: Setup CI/CD
      action: github:actions:dispatch
      input:
        repoUrl: ${{ parameters.repoUrl }}
        workflowId: setup-ci-cd.yml
        branchOrTagName: main
        workflowInputs:
          setup_required: 'true'
        
    - id: register
      name: Register in Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
